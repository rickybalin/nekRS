//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/RANSktau.hpp"
#include "client.h"
#include <vector>
#include <string>

/* User Functions */

static dfloat rho, mueLam;
occa::kernel userfKernel; 
static occa::kernel scalarScaledAddKernel;

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  mesh_t* mesh = nrs->meshV;
  const dfloat Re_tau = 2000.0; 
  const dfloat Re_b   = rho/mueLam; 
  const dfloat DPDX   = (Re_tau/Re_b)*(Re_tau/Re_b);
  userfKernel(mesh->Nlocal, 0*nrs->fieldOffset, DPDX, o_FU);
}

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateSourceTerms();
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateProperties();

  dfloat conductivity;
  platform->options.getArgs("SCALAR00 DIFFUSIVITY", conductivity);
  const dfloat Pr_t = 0.7;
  occa::memory o_mue_t = RANSktau::o_mue_t();
  occa::memory o_temp_mue = cds->o_diff + 0*cds->fieldOffset[0]*sizeof(dfloat);
  scalarScaledAddKernel(mesh->Nlocal, conductivity, 1/Pr_t, o_mue_t, o_temp_mue); 
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  userfKernel = oudfBuildKernel(kernelInfo, "cfill");
  scalarScaledAddKernel = oudfBuildKernel(kernelInfo, "scalarScaledAdd");
  RANSktau::buildKernel(kernelInfo);
}

void UDF_Setup(nrs_t *nrs)
{
  std::cout<<"Running UDF_Setup()"<<std::endl;
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  udf.properties = &uservp;
  udf.uEqnSource = &userf;
  udf.sEqnSource = &userq;

  const int scalarFieldStart = 1;
  platform->options.getArgs("VISCOSITY", mueLam); 
  platform->options.getArgs("DENSITY", rho); 
  RANSktau::setup(nrs, mueLam, rho, scalarFieldStart);

  size_t dim1 = 3;
  size_t dim2 = 2;
  size_t dim3 = 5;
  std::vector<size_t> dims = {3, 2, 5};
  size_t n_values = dim1 * dim2 * dim3;
  std::vector<double> input_tensor(n_values, 0);
  for(size_t i=0; i<n_values; i++)
    input_tensor[i] = 2.0*rand()/RAND_MAX - 1.0;

  std::string logger_name("Client ");
  int rank = 0;
  logger_name += std::to_string(rank);
  bool cluster_mode = false;
  SmartRedis::Client client(cluster_mode, logger_name);
  std::cout<<"\n"<<"Initialized client"<<std::endl;

  std::string key = "3d_tensor_" + std::to_string(rank);
  client.put_tensor(key, input_tensor.data(), dims,
                    SRTensorTypeDouble, SRMemLayoutContiguous);

  std::vector<double> unpack_tensor(n_values, 0);
  client.unpack_tensor(key, unpack_tensor.data(), {n_values},
                       SRTensorTypeDouble, SRMemLayoutContiguous);

  std::cout<<"Comparison of the sent and "\
              "retrieved (via unpack) values: "<<std::endl;
  for(size_t i=0; i<n_values; i++)
    std::cout<<"Sent: "<<input_tensor[i]<<" "
              <<"Received: "<<unpack_tensor[i]<<std::endl;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}
